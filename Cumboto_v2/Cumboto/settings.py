# -*- coding: utf-8 -*-
"""
Django settings for Cumboto_v2 project.

Generated by 'django-admin startproject' using Django 1.9.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

from __future__ import unicode_literals
import os
from .database_config import DATABASES_CONFIG

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '6t41yu57k1ei5g@&i3_uc!9q!jf)zrz(#1hf3c#u%yb&fm6)+n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
PREREQ_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'captcha',
    'rest_framework',
]
# Listado de aplicaciones del sistema
PROJECT_APPS = [
    'base',
    'biblioteca',
    'servicio',
    'usuario',
]

# Listado de aplicaciones cargadas por el sistema
INSTALLED_APPS = PREREQ_APPS + PROJECT_APPS

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Cumboto.urls'

# Directorio en donde se encuentran las plantillas en el root de la aplicación
ROOT_TEMPLATES = os.path.join(BASE_DIR, "templates")

# Directorio en donde se encuentran las plantillas del módulo base
BASE_TEMPLATES = os.path.join(BASE_DIR, "base/templates")

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ROOT_TEMPLATES, BASE_TEMPLATES],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Cumboto.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

## Configuración de la(s) base(s) de dato(s) del sistema
DATABASES = DATABASES_CONFIG


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

# Configuración del código del lenguaje a utilizar por defecto
LANGUAGE_CODE = 'es-VE'

# Configuración para el nombre de localización por defecto
LOCALE_NAME = 'es'

# Configuración para la zona horaria por defecto
TIME_ZONE = 'UTC'

# Determina si se emplea la internacionalización I18N
USE_I18N = True

# Determina si se emplea la internacionalización L10N
USE_L10N = True

#  Determina si se emplea la zona horaria
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/


# Configuración de la url que atenderá las peticiones de los archivos estáticos del sistema
STATIC_URL = '/static/'

# Configuración de los directorios en donde se encuentran los archivos estáticos
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static/'),

)

# URL de acceso al sistema
LOGIN_URL = "/login"

# URL de salida del sistema
LOGOUT_URL = "/logout"

# configuración que permite obtener la ruta en donde se encuentran las traducciones de la aplicación a otros lenguajes
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# Registro de mensajes al usuario
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'

# Configuración de variables para el envío de correo electrónico
# Nombre del Servidor de correo SMTP
EMAIL_HOST = 'localhost'
# Puerto del Servidor de correo SMTP
EMAIL_PORT = 25
# Dirección de correo electrónico de quien envía
EMAIL_FROM = 'hramirez@cenditel.gob.ve'

# Registro de mensajes al usuario
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'

# Registro de vitácoras de errores (logs)
LOGS_PATH = '/var/log/cumboto'

# Configuración de los niveles de vitácoras (logs) a registrar
LOGGING = dict(version=1, disable_existing_loggers=True, formatters={
    'std': {
        'format': '%(asctime)s %(levelname)-8s [modulo: %(module)s, funcion: %(funcName)s, linea: %(lineno)d]. %(message)s',
    }
}, handlers={
    'null': {
        'level': 'DEBUG',
        'class': 'logging.NullHandler'
    },
    'base': {
        'class': 'logging.handlers.TimedRotatingFileHandler',
        'level': 'DEBUG',
        'formatter': 'std',
        'filename': os.path.join(LOGS_PATH, 'base.log'),
        'when': 'w6',
        'interval': 1,
        'backupCount': 52
    },
    'usuario': {
        'class': 'logging.handlers.TimedRotatingFileHandler',
        'level': 'DEBUG',
        'formatter': 'std',
        'filename': os.path.join(LOGS_PATH, 'usuario.log'),
        'when': 'w6',
        'interval': 1,
        'backupCount': 52
    }
}, loggers={
    'root': {
        'level': 'DEBUG',
        'handlers': ['usuario']
    },
    'base': {
        'level': 'DEBUG',
        'handlers': ['base'],
        'qualname': 'base'
    },
    'usuario': {
        'level': 'DEBUG',
        'handlers': ['usuario'],
        'qualname': 'usuario'
    },
    'django.request': {
        'handlers': ['null'],
        'level': 'ERROR',
        'propagate': False,
    }
})

# Configuración del CAPTCHA
# Ruta en donde se encuentra el diccionario de palabras a utilizar en la generación del captcha
CAPTCHA_WORDS_DICTIONARY = os.path.join(BASE_DIR, "static/dictionaries/captcha-es.txt")
# Establece el tipo de captcha a generar. Se establece a la extraccion de palabras a partir de un diccionario
CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.word_challenge'
# Longitud de carácteres a mostrar en la imagen del captcha
CAPTCHA_LENGTH = 6
# Longitud de carácteres máxima permitida para extraer del diccionario
CAPTCHA_DICTIONARY_MAX_LENGTH = 6
# Longitud de carácteres mínima permitida para extraer del diccionario
CAPTCHA_DICTIONARY_MIN_LENGTH = 4
# Color de fondo para la imagen del captcha
CAPTCHA_BACKGROUND_COLOR = '#337AB7'
# Color de la fuente para la imagen del captcha
CAPTCHA_FOREGROUND_COLOR = '#FFF'

if DEBUG:
    # Elimina la imagen de ruido en el fondo del captcha cuando la aplicacion se encuentra en modo desarrollo
    CAPTCHA_NOISE_FUNCTIONS = ('captcha.helpers.noise_null',)

    # Tiempo de expiración del captcha en entornos de desarrollo, representado en minutos
    CAPTCHA_TIMEOUT = 1440 # 24 horas

    # Configura el backend para el envío de correo electrónico para mostrarlo en consola, solo en entorno de desarrollo
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
